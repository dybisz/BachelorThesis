################################################################################
For Clion Users MUST DO!!!
This has been made for your convenience.

1) Copy the following to CMakeLists.txt, completely overriding your version.
#--------------------------------------------------------------------#
            cmake_minimum_required(VERSION 3.3)
            project(bachelor_thesis)

            MACRO(FIND_DIRS return_list regex)
                FILE(GLOB_RECURSE new_list ${regex})
                SET(dir_list "")
                FOREACH(file_path ${new_list})
                    GET_FILENAME_COMPONENT(dir_path ${file_path} PATH)
                    SET(dir_list ${dir_list} ${dir_path})
                ENDFOREACH()
                LIST(REMOVE_DUPLICATES dir_list)
                SET(${return_list} ${dir_list})
            ENDMACRO()

            FIND_DIRS(INC_DIRS ./automata/include/*.h)
            FIND_DIRS(SRC_DIRS ./automata/src/*.cpp)
            FIND_DIRS(TST_SRC_DIRS ./automata/test/src/*.cpp)
            FIND_DIRS(TST_INC_DIRS ./automata/test/include/*.h)
            FIND_DIRS(G_DIRS ./googletest/include/*.h)
            FIND_DIRS(GVIZ_DIRS ./graphviz/include/*.h)

            include_directories(${INC_DIRS})
            include_directories(${SRC_DIRS})
            include_directories(${TST_SRC_DIRS})
            include_directories(${TST_INC_DIRS})
            include_directories(${G_DIRS})
            include_directories(${GVIZ_DIRS})

            # To make clion see gtests header file - for unit tests
            include_directories("./googletest/include")
            include_directories("./graphviz/include")

            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

            file(GLOB_RECURSE FILES
                    "./automata/src/*.cpp"
                    "./automata/include/*.h"
                    "./automata/test/src/*.cpp"
                    "./automata/test/include/*.h")

            set(SPAM)

            add_executable(ac ${FILES} ${SPAM})
#--------------------------------------------------------------------#

2) Go to File->Settings->(Build, Execution, Deployment)->Cmake
Select Automatic Cmake Project Reload On Editing, ON.

3) Whenever you create a new file Clion will ask you to choose:
        Add to targets
        [Check] ac<-${SPAM}
   Ones you select it, IDE will remember your choice.

Comment:
    The given CMakeList finds all files automatically in the project and helps
    CLion with parsing these files. Sadly CMakeList needs to be reloaded whenever
    You add new file. To avoid git merges and to create illusion of automatic
    Cmake reload this method is presented.
################################################################################

###########################################################
Unified Coding style:

Important elements to Unify are:

Insert Spaces for instead of Tabs - Tabs make the code poorly editted
Spaces count for each Tab - e.g. 4
Print Margin Column - e.g. 80

###########################################################

http://pages.mini.pw.edu.pl/~andrzejczakm/Group%20Project%20Rules.pdf

###########################################################
Setting up googletests:
https://code.google.com/p/googletest/wiki/

1) Compile the googletest project into static library
e.g. make, cmake, msvc. (each has a special folder inside googletest)

Our makefile does it automatically using make (cf. MAKE_EXTERNAL).

2) Link googletest with your testing project

add Include path to GTEST_ROOT/include
link the static gtest lib with your project

3) Done :)
###########################################################

Lab1

Add to Business Analysis:

Choose Mode: Classic vs Iterative.
Add Schedule

###########################################################

Lab2:
Detailed requirements analysis.
Preliminary architectural documentation.

###########################################################

Lab 3 
Detailed architectural documentation.
Preliminary implementation.

###########################################################

Lab 4 
Technical documentation.
Advanced implementation.

###########################################################

Lab 5 
Finished set of documentations (including user manual) .
Finished project.
